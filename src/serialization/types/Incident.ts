/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { PartSummary } from "./PartSummary";
import { ArtifactSummary } from "./ArtifactSummary";
import { AccountSummary } from "./AccountSummary";
import { UserSummary } from "./UserSummary";
import { EnumValue } from "./EnumValue";
import { Stage } from "./Stage";
import { TagWithValue } from "./TagWithValue";
import { AtomBase } from "./AtomBase";

export const Incident: core.serialization.ObjectSchema<serializers.Incident.Raw, DevRev.Incident> = core.serialization
    .object({
        appliesToParts: core.serialization.property(
            "applies_to_parts",
            core.serialization.list(PartSummary).optional()
        ),
        artifacts: core.serialization.list(ArtifactSummary).optional(),
        body: core.serialization.string().optional(),
        customFields: core.serialization.property(
            "custom_fields",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        customSchemaFragments: core.serialization.property(
            "custom_schema_fragments",
            core.serialization.list(core.serialization.string()).optional()
        ),
        identifiedAt: core.serialization.property("identified_at", core.serialization.date().optional()),
        impactedCustomers: core.serialization.property(
            "impacted_customers",
            core.serialization.list(AccountSummary).optional()
        ),
        ownedBy: core.serialization.property("owned_by", core.serialization.list(UserSummary).optional()),
        resolvedAt: core.serialization.property("resolved_at", core.serialization.date().optional()),
        severity: EnumValue.optional(),
        stage: Stage.optional(),
        stakeholders: core.serialization.list(UserSummary).optional(),
        stockSchemaFragment: core.serialization.property(
            "stock_schema_fragment",
            core.serialization.string().optional()
        ),
        subtype: core.serialization.string().optional(),
        tags: core.serialization.list(TagWithValue).optional(),
        targetCloseDate: core.serialization.property("target_close_date", core.serialization.date().optional()),
        title: core.serialization.string(),
    })
    .extend(AtomBase);

export declare namespace Incident {
    interface Raw extends AtomBase.Raw {
        applies_to_parts?: PartSummary.Raw[] | null;
        artifacts?: ArtifactSummary.Raw[] | null;
        body?: string | null;
        custom_fields?: Record<string, unknown> | null;
        custom_schema_fragments?: string[] | null;
        identified_at?: string | null;
        impacted_customers?: AccountSummary.Raw[] | null;
        owned_by?: UserSummary.Raw[] | null;
        resolved_at?: string | null;
        severity?: EnumValue.Raw | null;
        stage?: Stage.Raw | null;
        stakeholders?: UserSummary.Raw[] | null;
        stock_schema_fragment?: string | null;
        subtype?: string | null;
        tags?: TagWithValue.Raw[] | null;
        target_close_date?: string | null;
        title: string;
    }
}
